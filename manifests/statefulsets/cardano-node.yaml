apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cardano-app
  namespace: cardano
spec:
  serviceName: cardano-app
  replicas: 2
  selector:
    matchLabels:
      app: cardano-app
  template:
    metadata:
      labels:
        app: cardano-app
    spec:
      initContainers:
      - name: mithril-client
        image: blinklabs/mithril-client:latest
        env: # change to load from configmap if needed
        - name: AGGREGATOR_ENDPOINT
          # use aggregator endpoint
          # https://mithril.network/explorer/?aggregator=https%3A%2F%2Faggregator.release-mainnet.api.mithril.network%2Faggregator
          value: https://aggregator.release-mainnet.api.mithril.network/aggregator # already tried with https://aggregator.release-preprod.api.mithril.network/aggregator, see in sreenshoots folder
        - name: GENESIS_VERIFICATION_KEY
          value: 5b3139312c36362c3134302c3138352c3133382c31312c3233372c3230372c3235302c3134342c32372c322c3138382c33302c31322c38312c3135352c3230342c31302c3137392c37352c32332c3133382c3139362c3231372c352c31342c32302c35372c37392c33392c3137365d
        - name: SNAPSHOT_DIGEST
          value: latest
      
        # command:
        # - "echo"
        # - "exit"
        # - ">"
        # - "/dev/null"
        # - "tail"
        # - "-f"
        # - "/dev/null"

        # Restored from mithril for fast bootstrapping
        command: ["/bin/sh", "-c"]
        args:
        - |
          if [ -z "$(ls -A /data/db)" ]; then
            echo "Starting mithril-client download..."
            mithril-client -v \
              --aggregator-endpoint $AGGREGATOR_ENDPOINT \
              cardano-db download \
              --download-dir /data \
              --genesis-verification-key $GENESIS_VERIFICATION_KEY \
              $SNAPSHOT_DIGEST
          else
            echo "Data already exists in /data/db. Exiting..."
            exit 0
        #   fi

        volumeMounts:
        - name: node-data
          mountPath: /data

      containers:
      # NODE CONTAINER
      - name: cardano-node
        image: ghcr.io/intersectmbo/cardano-node:10.1.4
        # get from https://github.com/IntersectMBO/cardano-node/releases
        
        # command:
        # - "tail"
        # - "-f"
        # - "/dev/null"

        command: ["/bin/sh", "-c"]
        args:
        - |
          cardano-node run \
              --config /config/testnet-config.json \
              --topology /config/testnet-topology.json \
              --host-addr 0.0.0.0 \
              --database-path /data/db \
              --socket-path /data/node.socket \
              --port 3001

        ports:
        - containerPort: 3001
        volumeMounts:
        - name: node-data
          mountPath: /data
        - name: config-node
          mountPath: /config
        resources: # this is a very small size for testing, adjust as needed
          requests:
            cpu: "0.5"
            memory: "1Gi"
          limits:
            cpu: "1"
            memory: "4Gi"
      
      # DB SYNC CONTAINER
      - name: db-sync
        image: ghcr.io/intersectmbo/cardano-db-sync:13.6.0.4
        # get from https://github.com/intersectmbo/cardano-db-sync/pkgs/container/cardano-db-sync
        env:
        - name: DB_SYNC_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-secrets
              key: POSTGRES_DB
        - name: DB_SYNC_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secrets
              key: POSTGRES_USER
        - name: DB_SYNC_PASS
          valueFrom:
            secretKeyRef:
              name: postgresql-secrets
              key: POSTGRES_PASSWORD
        - name: PGPASSFILE
          value: /tmp/pgpass-mainnet

        # run command: https://github.com/IntersectMBO/cardano-db-sync/blob/master/doc/running.md

        # command:
        # - "tail"
        # - "-f"
        # - "/dev/null"

        command: ["/bin/sh", "-c"]
        args:
        - |
          # Pass variables
          cp /config/pgpass-mainnet /tmp/pgpass-mainnet
          sed -i "s/POSTGRES_DB/$DB_SYNC_DB/g" /tmp/pgpass-mainnet
          sed -i "s/POSTGRES_USER/$DB_SYNC_USER/g" /tmp/pgpass-mainnet
          sed -i "s/POSTGRES_PASSWORD/$DB_SYNC_PASS/g" /tmp/pgpass-mainnet
          chmod 0600 /tmp/pgpass-mainnet
          # Get Schema dir
          SCHEMA_DIR=`find / -type d -name "*-schema"`
          # Run
          cardano-db-sync \
            --config /config/db-sync-config.json \
            --socket-path /data/node.socket \
            --state-dir /data/db/ledger \
            --schema-dir $SCHEMA_DIR

        volumeMounts:
        - name: config-db-sync
          mountPath: /config
        - name: node-data
          mountPath: /data
        resources: # this is a very small size for testing, adjust as needed
          requests:
            cpu: "0.5"
            memory: "1Gi"
          limits:
            cpu: "1"
            memory: "4Gi"

      volumes:
      - name: config-node
        configMap:
          name: cardano-node-config
      - name: config-db-sync
        configMap:
          name: cardano-db-sync-config
  volumeClaimTemplates:
  - metadata:
      name: node-data
    spec:
      accessModes: [ "ReadWriteMany" ]
      resources:
        requests:
          storage: 100Gi